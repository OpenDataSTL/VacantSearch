{"version":3,"sources":["constants/tabs.js","utils/index.js","constants/action-types.js","actions/index.js","selectors/index.js","components/map/Map.js","constants/map-styles.js","components/map/MapTopToolbar.js","components/map/SatelliteOrStreetSwitch.js","components/map/MapContainer.js","components/sidebar/Sidebar.js","components/sidebar/ResultItemIconSet.js","components/sidebar/Result.js","components/sidebar/ScrollableResult.js","components/sidebar/ResultsList.js","components/sidebar/ResultsTab.js","components/sidebar/NeighborhoodSelect.js","components/sidebar/SearchForm.js","components/sidebar/SidebarContent.js","components/App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["RESULTS","SEARCH","mockApiData","process","REACT_APP_USE_MOCK_API_DATA","COLLAPSE_ALL_LOTS","FETCH_FILTERED_LOTS","SET_LOT_EXPANDED","SET_MAP","SET_MAP_STYLE","SET_SELECTED_TAB","setLotExpanded","lotId","expanded","type","payload","getFilteredLots","state","root","filteredLots","getMap","map","getMapStyle","mapStyle","getSearching","searching","getSelectedTab","selectedTab","mapboxgl","accessToken","Map","container","style","center","zoom","this","on","addSource","addLayer","setLayoutProperty","e","features","queryRenderedFeatures","point","layers","length","forEach","f","hasOwnProperty","properties","props","collapseAllLots","HANDLE","scrollToLot","setMap","remove","prevProps","lots","layer","setFilter","lot","_parcel_id","updateSatelliteLayerVisibility","id","satelliteLayerOpacity","setPaintProperty","Component","connect","MapTopToolbar","className","children","SatelliteOrStreetSwitch","target","value","setMapStyle","onChange","MapContainer","Sidebar","active","setState","sidebarClassNames","classNames","toggleButtonClassNames","toggleIconClassNames","onClick","onClickToggleButton","ResultItemIconSet","lotType","resultItem","lot_type","isPossibleType","startsWith","split","slice","join","resultTypeIcon","resultItemIconCx","Result","flyTo","JSON","parse","parcel_geojson","acres","basementType","basement_type","buildingType","bldg_type","centralHeat","central_heat","neighborhoodCode","nbrhd_code","neighborhoodName","nbrhd_name","wallMaterial","wall_material","price","price_residential","sqFt","Math","floor","size_sqFt","baths","bath_total","resultsItemCx","ScrollableResult","scrollToWhen","pattern","action","excludeProps","ScrollableList","scrollableArea","ResultsList","results","result","index","key","ResultsTab","NeighborhoodSelect","name","neighborhoods","neighborhood","SearchForm","event","preventDefault","fetchFilteredLots","sidebarForm","document","getElementById","formData","FormData","priceMin","get","priceMax","sqFtMin","sqFtMax","parseInt","minBaths","sidebarFormCx","searchInProgressCx","onSubmit","onFormSubmit","htmlFor","min","defaultValue","max","step","disabled","ConnectedSearchForm","params","Promise","resolve","mockApiFilterResponse","axios","post","then","response","data","SidebarContent","tabs","setSelectedTab","tab","Object","values","includes","Error","App","Boolean","window","location","hostname","match","initialState","rootReducer","store","createStore","combineReducers","form","formReducer","applyMiddleware","scrollMiddleware","createScrollMiddleware","common","promiseMiddleware","logger","getMiddleware","console","warn","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8d6d102.chunk.js","sourcesContent":["export const RESULTS = 'RESULTS';\nexport const SEARCH = 'SEARCH';\n","export const mockApiData = () => process.env.REACT_APP_USE_MOCK_API_DATA === 'yes';\n","export const COLLAPSE_ALL_LOTS = 'COLLAPSE_ALL_LOTS';\nexport const FETCH_FILTERED_LOTS = 'FETCH_FILTERED_LOTS';\nexport const SCROLL_TO_LOT = 'SCROLL_TO_LOT';\nexport const SET_LOT_EXPANDED = 'SET_LOT_EXPANDED';\nexport const SET_MAP = 'SET_MAP';\nexport const SET_MAP_STYLE = 'SET_MAP_STYLE';\nexport const SET_SELECTED_TAB = 'SET_SELECTED_TAB';\n","import axios from 'axios'\nimport * as tabs from '../constants/tabs';\nimport mockApiFilterResponse from '../assets/data/mock-api-filter-response.json';\nimport { mockApiData } from '../utils';\n\nimport {\n  COLLAPSE_ALL_LOTS,\n  FETCH_FILTERED_LOTS,\n  SCROLL_TO_LOT,\n  SET_LOT_EXPANDED,\n  SET_MAP,\n  SET_MAP_STYLE,\n  SET_SELECTED_TAB,\n} from \"../constants/action-types\";\n\n/**\n * collapse all lot results in Results tab\n */\nexport const collapseAllLots = () => ({\n  type: COLLAPSE_ALL_LOTS,\n});\n\nexport const fetchFilteredLots = (params) => {\n  const payload = mockApiData() ? \n    Promise.resolve(mockApiFilterResponse.results) : \n    axios.post(process.env.REACT_APP_API_URL, params)\n      .then(response => response.data.results);\n  return {\n    type: FETCH_FILTERED_LOTS,\n    payload,\n  };\n};\n\n/**\n * scroll to a lot in the result list\n * @param {string} id \n */\nexport const scrollToLot = lotId => ({\n  type: SCROLL_TO_LOT,\n  payload: lotId,\n});\n\n/**\n * Expand or contract an individual lot Result in the Results tab\n * @param {string} lotId _parcel_id\n * @param {boolean} expanded \n */\nexport const setLotExpanded = (lotId, expanded) => ({\n  type: SET_LOT_EXPANDED,\n  payload: { expanded, lotId },\n});\n\n/**\n * Store ref to central Mapbox for access by other components.\n * TODO: there are probably better ways to expose map access , but I can't think of a good way\n * to allow other components to run repeated, identical calls to the map (flyTo with same parameters)\n * through state alone. I think some components use redux middleware traps to do this.\n * @param {mapboxgl.Map} map\n */\nexport const setMap = map => ({\n  type: SET_MAP,\n  payload: map,\n});\n\nexport const setMapStyle = (style) => ({\n  type: SET_MAP_STYLE,\n  payload: style,\n});\n\n/**\n * Set active sidebar tab\n * @param {string} tab See constants/tabs.js\n */\nexport function setSelectedTab(tab) {\n  if (!Object.values(tabs).includes(tab)) throw new Error(`unknown tab ${tab}`);\n  return {\n    type: SET_SELECTED_TAB,\n    payload: tab,  \n  };\n}\n","export const getFilteredLots = state => {\n  return state.root.filteredLots;\n}\n\nexport const getMap = state => {\n  return state.root.map;\n}\n\nexport const getMapStyle = state => {\n  return state.root.mapStyle;\n}\n\nexport const getSearching = state => {\n  return state.root.searching;\n}\n\nexport const getSelectedTab = state => {\n  return state.root.selectedTab;\n}\n","import { connect } from 'react-redux';\nimport mapboxgl from 'mapbox-gl';\nimport React, { Component } from 'react';\n\nimport { collapseAllLots, scrollToLot, setMap, setLotExpanded } from '../../actions';\nimport { getFilteredLots, getMapStyle } from '../../selectors';\nimport * as mapStyles from '../../constants/map-styles';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\n\nconst mapStateToProps = state => {\n  return {\n    lots: getFilteredLots(state),\n    mapStyle: getMapStyle(state),\n  };\n};\n\nclass Map extends Component {\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      // container id\n      container: 'map',\n      // stylesheet location\n      style: 'mapbox://styles/mrao2/cjzuiuexr09mn1crs8tz35s3k',\n      // starting position [lng, lat]\n      center: [-90.199402, 38.627003],\n      // starting zoom\n      zoom: 12,\n    });\n    this.map = map;\n\n    map.on('load', function () {\n\n      //added all parcels layer\n      map.addSource('parcels', {\n        \"type\": \"vector\",\n        \"url\": \"mapbox://mrao2.1h90kw7u\"\n      });\n\n      map.addLayer({\n        \"id\": \"parcel-highlights\",\n        \"type\": \"fill\",\n        \"source\": \"parcels\",\n        \"source-layer\": \"parcels-3swwt3\",\n        \"paint\": {\n          \"fill-outline-color\": \"rgba(238, 66, 244,1)\",\n          \"fill-color\": \"rgba(238, 66, 244,1)\"\n        }\n      });\n      map.setLayoutProperty('parcel-highlights', 'visibility', 'none')\n\n    });\n\n    map.on('click', (e) => {\n\n      const features = map.queryRenderedFeatures(e.point, {\n        layers: ['parcel-highlights']\n      });\n\n      if (!features.length) {\n        return;\n      }\n\n      features.forEach((f) => {\n        if (f.hasOwnProperty('properties') && f.properties.hasOwnProperty('HANDLE')) {\n          this.props.collapseAllLots();\n          const lotId = f.properties.HANDLE;\n          this.props.setLotExpanded(lotId, true);\n          this.props.scrollToLot(lotId);\n        }\n      });\n\n    });\n    this.props.setMap(map);\n  }\n  componentWillUnmount() {\n    this.map.remove();\n    this.props.setMap(null);\n  }\n  componentDidUpdate(prevProps) {\n    // TODO: check for lots array to have changed contents before executing the setFilter and related commands\n    const { lots } = this.props;\n    const map = this.map;\n    const layer = 'parcel-highlights';\n    if (!lots.length) {\n      map.setFilter(layer, ['all', ['match', ['get', 'HANDLE'], ['x'], true, true]]);\n      map.setLayoutProperty('parcel-highlights', 'visibility', 'none');\n    } else {\n      map.setFilter(layer, ['all', ['match', ['get', 'HANDLE'], lots.map(lot => lot._parcel_id), true, false]]);\n      map.setLayoutProperty('parcel-highlights', 'visibility', 'visible');\n    }\n\n    if (prevProps.mapStyle !== this.props.mapStyle) {\n      this.updateSatelliteLayerVisibility();\n    }\n  }\n  render() {\n    return (\n      <div id='map'></div>\n    );\n  }\n  updateSatelliteLayerVisibility() {\n    const satelliteLayerName = 'mapbox-satellite';\n    const satelliteLayerOpacity = this.props.mapStyle === mapStyles.SATELLITE ?\n      1 : \n      0;\n    this.map.setPaintProperty(\n      satelliteLayerName,\n      'raster-opacity',\n      satelliteLayerOpacity,\n    );      \n  }\n}\n\nexport default connect(mapStateToProps, {\n  collapseAllLots,\n  scrollToLot,\n  setLotExpanded,\n  setMap,\n})(Map)\n","export const SATELLITE = 'satellite';\nexport const STREET = 'street';\n","import React, { Component } from 'react';\n\nclass MapTopToolbar extends Component {\n  render() {\n    return (\n      <div className='map-top-toolbar'>\n        {this.props.children}\n      </div>\n    );\n  }\n}\nexport default MapTopToolbar;\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport * as mapStyles from '../../constants/map-styles';\nimport { getMapStyle } from '../../selectors';\nimport { setMapStyle } from '../../actions';\n\nconst mapStateToProps = state => {\n  return {\n    mapStyle: getMapStyle(state),\n  };\n};\n\nclass SatelliteOrStreetSwitch extends Component {\n  onChange(e) {\n    const mapStyle = e.target.value;\n    this.props.setMapStyle(mapStyle);\n  }\n  render() {\n    return (\n      <select\n        onChange={(e) => this.onChange(e)}\n        value={this.props.mapStyle}\n      >\n        <option value={mapStyles.STREET}>Streets</option>\n        <option value={mapStyles.SATELLITE}>Satellite</option>\n      </select>\n    );\n  }\n}\nexport default connect(mapStateToProps, { setMapStyle })(SatelliteOrStreetSwitch);\n","import React from 'react';\nimport Map from './Map';\nimport MapTopToolbar from './MapTopToolbar';\nimport SatelliteOrStreetSwitch from './SatelliteOrStreetSwitch';\n\nfunction MapContainer() {\n  return (\n    <div className='map-container'>\n      <Map />\n      <MapTopToolbar>\n        <SatelliteOrStreetSwitch />\n      </MapTopToolbar>\n    </div>\n  )\n}\nexport default MapContainer;\n","import classNames from 'classnames';\nimport React, { Component } from 'react';\n\nclass Sidebar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      active: true,\n    };\n  }\n  onClickToggleButton() {\n    this.setState((state) => ({\n      active: !state.active,\n    }));\n  }\n  render() {\n    const sidebarClassNames = classNames('sidebar', { active: this.state.active });\n    const toggleButtonClassNames = classNames('toggle-btn', { active: this.state.active });\n    const toggleIconClassNames = classNames('fa', {\n      'fa-chevron-right': !this.state.active,\n      'fa-chevron-left': this.state.active,\n    });\n    return (\n      <div className=\"sidebar-container\">\n        <div className={sidebarClassNames} id=\"sidebar\">\n          {/*Sidebar Toggle Button*/}\n          <div \n            className={toggleButtonClassNames}\n            onClick={() => this.onClickToggleButton()}\n          >\n            <i className={toggleIconClassNames} id=\"toggle-icon\"></i>\n          </div>\n          {/*Top Sidebar Header*/}\n          <header className=\"sidebar-section sidebar-header\">\n            <h1 className=\"heading_brand-name\">OpenSTL</h1>\n            <p>Search for vacant houses in St. Louis</p>\n            <div className=\"geocoder\" id=\"geocoder\"></div>\n          </header>\n          <br />\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Sidebar;\n","import classNames from 'classnames';\nimport React, { Component } from 'react';\n\n/**\n * prop: resultItem\n * \n * icon(s) that accompany each search result\n * icons depend on lot type (building, lot, other)\n * if 'vacant building', it's a building icon\n * if 'vacant lot', it's a seedling icon\n * otherwise it's a question mark icon\n * however... if the word \"Possible\" is at the front of the lot type...\n * we will get a second question mark icon that appears after the first.\n * Example. \"Possible Vacant Building\" gets two icons: a building and a question.\n * Example. \"Vacant Lot\" gets one icon: a seedling\n */\nclass ResultItemIconSet extends Component {\n  render() {\n    let lotType = this.props.resultItem.lot_type;\n    const isPossibleType = lotType.startsWith('Possible');\n    if (isPossibleType) {\n      // if this is a possible type ex. 'Possible Vacant Lot',\n      // remove 'Possible' from the string so we can evaluate\n      // the lot type by itself\n      lotType = lotType.split(' ').slice(1).join(' ');\n    }\n    // Determine icon from lot type\n    let resultTypeIcon = '';\n    switch (lotType) {\n      case 'Vacant Building':\n        resultTypeIcon = 'fa-building';\n        break;\n      case 'Vacant Lot':\n        resultTypeIcon = 'fa-seedling';\n        break;\n      default:\n        resultTypeIcon = 'fa-question';\n    }\n    const resultItemIconCx = classNames('fa', resultTypeIcon, 'results-item-icon');\n\n    return (\n      <>\n        <i className={resultItemIconCx} />\n        {isPossibleType && <i className='fa fa-question results-item-icon' />}\n      </>\n    );\n  }\n}\nexport default ResultItemIconSet;\n","import classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport ResultItemIconSet from './ResultItemIconSet';\nimport { getMap } from '../../selectors';\nimport {\n  setLotExpanded,\n} from '../../actions';\n\nfunction getFlyToPointForLot(lot) {\n  const points = JSON.parse(lot.parcel_geojson)[0];\n  const point = points[0];\n  const corner = point[0];\n  return corner;\n}\n\nconst mapStateToProps = state => {\n  return {\n    map: getMap(state),\n  };\n};\n\n// prop: resultItem\nclass Result extends Component {\n  onClick() {\n    const { resultItem } = this.props;\n    if (!resultItem.expanded) {\n      this.props.map.flyTo({\n        center: getFlyToPointForLot(resultItem),\n        zoom: 20,\n      });\n    }\n    this.props.setLotExpanded(resultItem._parcel_id, !resultItem.expanded);\n  }\n  render() {\n    // details\n    const { resultItem } = this.props;\n    const acres = resultItem.acres;\n    const basementType = resultItem.basement_type;\n    const buildingType = resultItem.bldg_type;\n    const centralHeat = resultItem.central_heat;\n    const id = resultItem._parcel_id;\n    const neighborhoodCode = resultItem.nbrhd_code;\n    const neighborhoodName = resultItem.nbrhd_name;\n    const wallMaterial = resultItem.wall_material;\n    // top right info items\n    const price = resultItem.price_residential;\n    const sqFt = Math.floor(resultItem.size_sqFt);\n    const baths = resultItem.bath_total;\n\n    const resultsItemCx = classNames('results-item', {\n      'result-open': resultItem.expanded,\n    });\n\n    return (\n      <div\n        className={resultsItemCx}\n        onClick={() => this.onClick()}\n      >\n        <div className=\"results-item-icon-container\">\n          <ResultItemIconSet resultItem={resultItem} />\n        </div>\n        <div className=\"results-item-details\">\n          <h3>\n            <span>{neighborhoodName}</span>\n          </h3>\n          <ul>\n            <li>id: {id}</li>\n            <li>nbCode: {neighborhoodCode}</li>\n            <li>acres: {acres}</li>\n            <li>building: {buildingType}</li>\n            <li>walls: {wallMaterial}</li>\n            <li>basement: {basementType}</li>\n            <li>heating: {centralHeat}</li>\n          </ul>\n        </div>\n        <div className=\"results-item-stats\">\n          <span>{'$' + price}</span>\n          <span>{baths + ' Bath'}</span>\n          <span>{sqFt + 'SF'}</span>\n        </div>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, { setLotExpanded })(Result);\n","import { SCROLL_TO_LOT } from '../../constants/action-types';\nimport { scrollToWhen } from 'react-redux-scroll';\n\nconst isResultSelected = (action, props) => (\n  action.type === SCROLL_TO_LOT && props.id === action.payload\n);\n\nconst ScrollableResult = scrollToWhen({\n  pattern: isResultSelected,\n  excludeProps: ['id'],\n})('div');\n\nexport default ScrollableResult;\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { getFilteredLots } from '../../selectors'\nimport { scrollableArea } from 'react-redux-scroll';\n\nimport Result from './Result';\nimport ScrollableResult from './ScrollableResult';\n\nconst mapStateToProps = state => {\n  return { results: getFilteredLots(state) };\n};\n\nconst ScrollableList = scrollableArea('div');\n\nclass ResultsList extends Component {\n  render() {\n    return (\n      <ScrollableList className=\"results-container noscroll\">\n        {this.props.results.map((result, index) => (\n          <ScrollableResult\n            key={index}\n            id={result._parcel_id}\n          >\n            <Result resultItem={result} />\n          </ScrollableResult>\n        ))}\n        {this.props.results.length === 0 && <p>No matching results. Please try another search</p>}\n      </ScrollableList>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(ResultsList);\n","import React, { Component } from 'react';\nimport ResultsList from './ResultsList';\n\nclass ResultsTab extends Component {\n  render() {\n    return (\n      <>\n        <header className=\"results-header\">\n          <div className=\"icon-key\">\n            <i className=\"fa fa-building\"></i>\n            Building\n          </div>\n          <div className=\"icon-key\">\n            <i className=\"fa fa-seedling\"></i>\n            Lot\n          </div>\n          <div className=\"icon-key\">\n            <i className=\"fa fa-question\"></i>\n            Possible\n          </div>\n        </header>\n        <ResultsList />  \n      </>\n    );\n  }\n}\nexport default ResultsTab;","import React from 'react';\nimport neighborhoods from '../../assets/data/neighborhoods.json';\n\nfunction NeighborhoodSelect() {\n  return (\n    <select id=\"form-neighborhood\" name=\"form-neighborhood\">\n      <option value='0'>All Neighborhoods</option>\n      {neighborhoods.map((neighborhood, index) => (\n        <option key={index} value={neighborhood.id}>\n          {neighborhood.name}\n        </option>\n      ))}\n    </select>\n  );\n}\nexport default NeighborhoodSelect;\n","import classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport NeighborhoodSelect from './NeighborhoodSelect';\nimport { fetchFilteredLots } from '../../actions';\nimport { getSearching } from '../../selectors';\n\nclass SearchForm extends Component {\n  onFormSubmit(event) {\n    event.preventDefault();\n\n    const { fetchFilteredLots } = this.props;\n\n    // Get data from form\n    const sidebarForm = document.getElementById('sidebar-form');\n    const formData = new FormData(sidebarForm);\n    const priceMin = formData.get('form-price-min');\n    const priceMax = formData.get('form-price-max');\n    const sqFtMin = formData.get('form-acres-min');\n    const sqFtMax = formData.get('form-acres-max');\n    const neighborhoods = [\n      parseInt(formData.get('form-neighborhood')),\n    ];\n    const minBaths = formData.get('form-baths-min');\n    const maxBaths = formData.get('form-baths-max');\n\n    // Format api request\n    const requestData = {\n      \"IncludePossible\": true,\n      \"LotType\": 3,  // 1 vacant lot, 2 vacant building, 3 both\n      \"Neighborhoods\": neighborhoods,\n      \"NumBathsMax\": maxBaths,\n      \"NumBathsMin\": minBaths,\n      \"PriceMax\": priceMax,\n      \"PriceMin\": priceMin,\n      \"SqFtMin\": sqFtMin,\n      \"SqFtMax\": sqFtMax,\n    };\n\n    // Make the request\n    fetchFilteredLots(requestData);\n  }\n\n  render() {\n    let { searching } = this.props;\n\n    const sidebarFormCx = classNames({\n      'invisible': searching,\n    });\n    const searchInProgressCx = classNames({\n      'invisible': !searching,\n    });\n\n    return (\n      <>\n        <form \n          action=\"post\"\n          className={sidebarFormCx}\n          id=\"sidebar-form\"\n          onSubmit={(e) => this.onFormSubmit(e)}\n        >\n          <fieldset className=\"form-fieldset\">\n            <label htmlFor=\"form-price-min\" className=\"form-section\">\n              Price\n              <div className=\"input-container\">\n                <div><span className=\"subtext\">min </span><input type=\"number\"\n                    name=\"form-price-min\" id=\"form-price-min\"\n                    min=\"0\" defaultValue=\"0\"\n                    max=\"10000000\" step=\"10000\" \n                    disabled />\n                </div>\n                <div><span className=\"subtext\">max </span><input type=\"number\"\n                    name=\"form-price-max\" id=\"form-price-max\"\n                    min=\"0\" defaultValue=\"40000\"\n                    max=\"10000000\" step=\"10000\" \n                    disabled />\n                </div>\n              </div>\n            </label>\n            <label htmlFor=\"form-acres-min\" className=\"form-section\">\n              Sq Ft\n              <div className=\"input-container\">\n                <div><span className=\"subtext\">min </span><input type=\"number\"\n                    name=\"form-acres-min\"\n                    id=\"form-acres-min\"\n                    min=\"10\" defaultValue=\"1200\"\n                    max=\"20000\" step=\"1\" /></div>\n                <div><span className=\"subtext\">max </span><input type=\"number\"\n                    name=\"form-acres-max\"\n                    id=\"form-acres-max\"\n                    min=\"10\" defaultValue=\"2300\"\n                    max=\"2000000\" step=\"1\" /></div>\n              </div>\n            </label>\n            <label htmlFor=\"form-neighborhood\" className=\"form-section\n              form-section-neighborhood\">\n              Neighborhood\n              <NeighborhoodSelect />\n            </label>\n            <label htmlFor=\"form-baths-min\" className=\"form-section\">\n              Baths\n              <div>\n                <select name=\"form-baths-min\" id=\"form-baths-min\"\n                  className=\"form-baths\"\n                  min=\"0\" max=\"6\" step=\"0.5\"\n                  defaultValue={'1'}\n                >\n                  <option>.5</option>\n                  <option>1</option>\n                  <option>1.5</option>\n                  <option>2</option>\n                  <option>2.5</option>\n                  <option>3</option>\n                  <option>3.5</option>\n                  <option>4</option>\n                  <option>4.5</option>\n                  <option>5</option>\n                  <option>5.5</option>\n                  <option>6</option>\n                </select>\n                -\n                <select name=\"form-baths-max\" id=\"form-baths-max\"\n                  className=\"form-baths\"\n                  min=\"0\" max=\"6\" step=\"0.5\"\n                  defaultValue={'2.5'}\n                >\n                  <option>.5</option>\n                  <option>1</option>\n                  <option>1.5</option>\n                  <option>2</option>\n                  <option>2.5</option>\n                  <option>3</option>\n                  <option>3.5</option>\n                  <option>4</option>\n                  <option>4.5</option>\n                  <option>5</option>\n                  <option>5.5</option>\n                  <option>6</option>\n                </select>\n              </div>\n            </label>\n          </fieldset>\n          <input type=\"submit\" value=\"Search\" className=\"form-submit-btn\" />\n        </form>\n        {/* search in progress */}\n        <div\n          id=\"sidebar-form-search-in-progress\"\n          className={searchInProgressCx}\n        >\n          <div className=\"linear-progress-container\">\n            <div className=\"indeterminate-progress\"></div>\n          </div>\n          <p>Searching...</p>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  searching: getSearching(state)\n})\n\nconst ConnectedSearchForm = connect(\n  mapStateToProps,\n  { fetchFilteredLots }\n)(SearchForm);\n\nexport default ConnectedSearchForm;\n","import * as tabs from '../../constants/tabs';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport ResultsTab from './ResultsTab';\nimport SearchForm from './SearchForm';\nimport { setSelectedTab } from '../../actions';\nimport { getSelectedTab } from '../../selectors';\n\nconst mapStateToProps = state => {\n  return { selectedTab: getSelectedTab(state) };\n};\n\nclass SidebarContent extends Component {\n  render() {\n    return (\n      <section className=\"sidebar-section\">\n        {/* Tab Headers */}\n        <div className=\"tab-row\">\n          <div\n            className={classNames('tab', 'tab-search', { 'tab-active': this.props.selectedTab === tabs.SEARCH})}\n            onClick={() => this.props.setSelectedTab(tabs.SEARCH)}\n          >\n            <span className=\"tab-search\">\n              <i className=\"fa fa-search\"></i>\n              Search\n            </span>\n          </div>\n          <div\n            className={classNames('tab', 'tab-results', { 'tab-active': this.props.selectedTab === tabs.RESULTS})}\n            onClick={() => this.props.setSelectedTab(tabs.RESULTS)}\n          >\n            <span className=\"tab-results\">\n              <i className=\"fa fa-list\"></i>\n              Results\n            </span>\n          </div>\n        </div>\n        {/* Tabbed Sections */}\n        <div className=\"sidebar-tab-content\">\n          {/* Tab 1: Search Form */}\n          <div className={classNames('tab-content', 'tab-content-search', { 'tab-active': this.props.selectedTab === tabs.SEARCH})}>\n            <SearchForm />\n          </div>\n          {/* Tab 2: Results ListView */}\n          <div className={classNames('tab-content', 'tab-content-results', { 'tab-active': this.props.selectedTab === tabs.RESULTS})}>\n            <ResultsTab />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\nexport default connect(mapStateToProps, { setSelectedTab })(SidebarContent);\n","import MapContainer from './map/MapContainer';\nimport React from 'react';\nimport Sidebar from './sidebar/Sidebar';\nimport SidebarContent from './sidebar/SidebarContent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapContainer />\n      <Sidebar>\n        <SidebarContent />\n      </Sidebar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as mapStyles from '../constants/map-styles';\nimport * as tabs from '../constants/tabs';\nimport {\n  COLLAPSE_ALL_LOTS,\n  FETCH_FILTERED_LOTS,\n  SET_LOT_EXPANDED,\n  SET_MAP,\n  SET_MAP_STYLE,\n  SET_SELECTED_TAB,\n} from \"../constants/action-types\";\n\nconst initialState = {\n  filteredLots: [],\n  map: null,\n  // if you change the initial mapStyle here, you must also change it in the MapBox config which is not in this repo.\n  mapStyle: mapStyles.STREET,\n  searching: false,\n  selectedTab: tabs.SEARCH,\n};\n\nfunction rootReducer (state = initialState, action) {\n  if (action.type === COLLAPSE_ALL_LOTS) {\n    return {\n      ...state,\n      filteredLots: state.filteredLots.map(lot => ({\n        ...lot,\n        expanded: false,\n      })),\n    };\n  }\n\n  if (action.type === `${FETCH_FILTERED_LOTS}_FULFILLED`) {\n    return {\n      ...state,\n      filteredLots: action.payload,\n      searching: false,\n      selectedTab: tabs.RESULTS,\n    };\n  }\n  \n  if (action.type === `${FETCH_FILTERED_LOTS}_PENDING`) {\n    return { ...state, searching: true }\n  }\n  \n  if (action.type === `${FETCH_FILTERED_LOTS}_FAILED`) {\n    return { ...state, searching: false }\n  }\n\n  if (action.type === SET_LOT_EXPANDED) {\n    const { expanded, lotId } = action.payload;\n    return {\n      ...state,\n      filteredLots: state.filteredLots.map(lot => ({\n        ...lot,\n        expanded: (lotId === lot._parcel_id) ? expanded : lot.expanded,\n      })),\n    };\n  }\n  \n  if (action.type === SET_MAP) {\n    return {\n      ...state,\n      map: action.payload,\n    };\n  }\n\n  if (action.type === SET_MAP_STYLE) {\n    return {\n      ...state,\n      mapStyle: action.payload,\n    }\n  }\n\n  if (action.type === SET_SELECTED_TAB) {\n    return { ...state, selectedTab: action.payload };\n  }\n  \n  return state;\n}\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createScrollMiddleware } from 'react-redux-scroll';\nimport { reducer as formReducer } from 'redux-form'\nimport logger from 'redux-logger';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nimport rootReducer from '../reducers';\n\nconst devMode = process.env.NODE_ENV !== 'production';\n\nconst getMiddleware = () => {\n  const scrollMiddleware = createScrollMiddleware();\n  const common = [\n    promiseMiddleware,\n    scrollMiddleware,\n  ];\n  const dev = [\n    logger,\n  ];\n  const prod = [];\n  return [...common, ...(devMode ? dev : prod)];\n}\n\nconst store = createStore(\n  combineReducers({\n    root: rootReducer,\n    form: formReducer,\n  }),\n  applyMiddleware(...getMiddleware()),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './main.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { mockApiData } from './utils';\n\nif (mockApiData()) console.warn('mocking API response instead of making API call');\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}